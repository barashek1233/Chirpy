// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addPassWordForEmail = `-- name: AddPassWordForEmail :exec

UPDATE users
SET hashed_password = $1
WHERE email = $2
`

type AddPassWordForEmailParams struct {
	HashedPassword string
	Email          string
}

func (q *Queries) AddPassWordForEmail(ctx context.Context, arg AddPassWordForEmailParams) error {
	_, err := q.db.ExecContext(ctx, addPassWordForEmail, arg.HashedPassword, arg.Email)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deletAllUsers = `-- name: DeletAllUsers :exec

DELETE FROM users
`

func (q *Queries) DeletAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deletAllUsers)
	return err
}

const getHashPassword = `-- name: GetHashPassword :one

SELECT hashed_password
FROM users
WHERE email = $1
`

func (q *Queries) GetHashPassword(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getHashPassword, email)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getUserForEmail = `-- name: GetUserForEmail :one

SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM users
WHERE email = $1
`

func (q *Queries) GetUserForEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserForID = `-- name: GetUserForID :one

SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM users
WHERE id = $1
`

func (q *Queries) GetUserForID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updgradeToRed = `-- name: UpdgradeToRed :exec

UPDATE users
SET is_chirpy_red = TRUE
WHERE id = $1
`

func (q *Queries) UpdgradeToRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updgradeToRed, id)
	return err
}

const userUpdateEmail = `-- name: UserUpdateEmail :exec

UPDATE users
SET email = $2
WHERE id = $1
`

type UserUpdateEmailParams struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) UserUpdateEmail(ctx context.Context, arg UserUpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, userUpdateEmail, arg.ID, arg.Email)
	return err
}

const userUpdatePasswd = `-- name: UserUpdatePasswd :exec

UPDATE users
SET hashed_password = $2
WHERE id = $1
`

type UserUpdatePasswdParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) UserUpdatePasswd(ctx context.Context, arg UserUpdatePasswdParams) error {
	_, err := q.db.ExecContext(ctx, userUpdatePasswd, arg.ID, arg.HashedPassword)
	return err
}
